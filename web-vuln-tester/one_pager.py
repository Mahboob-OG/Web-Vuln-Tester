#!/usr/bin/env python3
"""
one_pager.py — Auto-detects latest scan, adds Exportable Security Checklist, and opens in browser
"""

import sys, os, json, html, webbrowser
from datetime import datetime
from pathlib import Path

TEMPLATE = """<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>Scan One-Pager — {target}</title>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <style>
    @page {{ size: A4; margin: 20mm; }}
    body {{ font-family: Arial, Helvetica, sans-serif; margin: 0; color: #222; }}
    .container {{ padding: 10px 12px; max-width: 1120px; margin: 0 auto; }}
    header {{ display:flex; justify-content:space-between; align-items:center; margin-bottom:12px; }}
    h1 {{ font-size:20px; margin:0; }}
    .meta {{ text-align:right; font-size:12px; color:#555; }}
    .score {{ display:flex; align-items:center; gap:12px; }}
    .progress {{ background:#eee; border-radius:6px; overflow:hidden; width:360px; height:18px; }}
    .bar {{ height:100%; background:linear-gradient(90deg,#4caf50,#ffb74d); text-align:center; color:#fff; font-weight:700; font-size:12px; }}
    .section {{ margin-top:14px; }}
    table {{ width:100%; border-collapse:collapse; font-size:12px; }}
    th, td {{ text-align:left; padding:6px 8px; border-bottom:1px solid #eee; }}
    .pass {{ color:#2e7d32; font-weight:700; }}
    .warn {{ color:#f9a825; font-weight:700; }}
    .fail {{ color:#c62828; font-weight:700; }}
    .footer {{ margin-top:18px; font-size:11px; color:#666; border-top:1px dashed #ddd; padding-top:8px; }}
    .two-col {{ display:flex; gap:12px; }}
    .col {{ flex:1; }}
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div>
        <h1>Scan One-Pager — {target}</h1>
        <div style="color:#666;font-size:12px;">Final URL: {final_url}</div>
      </div>
      <div class="meta">
        <div>Report time: {time}</div>
        <div>Score: <strong>{score}/100</strong></div>
      </div>
    </header>

    <div class="section score">
      <div style="min-width:120px">
        <div style="color:#666;font-size:12px;">Security Score</div>
        <div style="font-size:18px;font-weight:700;">{score} / 100</div>
      </div>
      <div class="progress" aria-hidden="true"><div class="bar" style="width:{score}%;"></div></div>
      <div style="flex:1"></div>
    </div>

    <div class="section">
      <strong>Executive Summary</strong><br/>
      <div style="color:#555;">{summary}</div>
    </div>

    <!-- Security Checklist -->
    <div class="section">
      <strong>✅ Security Checklist</strong>
      <table>
        <thead><tr><th>Check</th><th>Status</th><th>Details</th></tr></thead>
        <tbody>
          {checklist_rows}
        </tbody>
      </table>
    </div>

    <!-- Top Findings + Headers -->
    <div class="section two-col">
      <div class="col">
        <strong>Top Findings</strong>
        <table>
          <thead><tr><th>Issue</th><th>Detail</th></tr></thead>
          <tbody>{top_findings_rows}</tbody>
        </table>
      </div>
      <div class="col">
        <strong>Headers & Cookies</strong>
        <table>
          <thead><tr><th>Header/Cookie</th><th>Value / Issues</th></tr></thead>
          <tbody>{headers_rows}{cookie_rows}</tbody>
        </table>
      </div>
    </div>

    <div class="section">
      <strong>Brute-force Highlights</strong>
      <pre style="background:#f7f7f7;padding:8px;border-radius:6px;overflow:auto;max-height:200px;">{bf_text}</pre>
    </div>

    <div class="footer">
      Generated by WebVulnTester — educational tool. Only scan with permission.
    </div>
  </div>
</body>
</html>
"""

def classify(status):
    if status == "PASS": return '<span class="pass">PASS</span>'
    if status == "WARN": return '<span class="warn">WARN</span>'
    return '<span class="fail">FAIL</span>'

def make_checklist(data):
    checks = []
    tls = data.get("tls_cert")
    if not tls:
        checks.append(("HTTPS Certificate", classify("FAIL"), "No certificate info"))
    else:
        na = tls.get("notAfter")
        if na:
            try:
                exp = datetime.strptime(na, "%b %d %H:%M:%S %Y %Z")
                days = (exp - datetime.utcnow()).days
                if days < 0:
                    checks.append(("HTTPS Certificate", classify("FAIL"), f"Expired {abs(days)} days ago"))
                elif days <= 30:
                    checks.append(("HTTPS Certificate", classify("WARN"), f"Expiring in {days} days"))
                else:
                    checks.append(("HTTPS Certificate", classify("PASS"), f"Valid ({days} days left)"))
            except Exception:
                checks.append(("HTTPS Certificate", classify("PASS"), "Valid"))
        else:
            checks.append(("HTTPS Certificate", classify("PASS"), "Valid"))

    missing_headers = [k for k,v in (data.get("security_headers") or {}).items() if not v]
    if missing_headers:
        checks.append(("Security Headers", classify("FAIL"), f"Missing {len(missing_headers)} header(s): {', '.join(missing_headers[:4])}"))
    else:
        checks.append(("Security Headers", classify("PASS"), "All key headers present"))

    csp_issues = data.get("csp_issues") or []
    checks.append(("CSP Policy", classify("FAIL" if csp_issues else "PASS"), "; ".join(csp_issues) if csp_issues else "Secure"))

    cookie_issues = data.get("cookie_issues") or []
    checks.append(("Cookies", classify("FAIL" if cookie_issues else "PASS"), f"{len(cookie_issues)} issue(s)" if cookie_issues else "Secure flags present"))

    methods = [m for m in (data.get("allowed_methods") or []) if m not in ("GET","POST","HEAD")]
    checks.append(("HTTP Methods", classify("FAIL" if methods else "PASS"), f"Unsafe: {', '.join(methods)}" if methods else "Only GET/POST"))

    sens = data.get("sensitive_files") or []
    checks.append(("Sensitive Files", classify("FAIL" if sens else "PASS"), f"{len(sens)} exposed" if sens else "None exposed"))

    checks.append(("Directory Indexing", classify("FAIL" if data.get("directory_indexing") else "PASS"), "Enabled" if data.get("directory_indexing") else "Disabled"))

    checks.append(("Open Redirect Params", classify("FAIL" if data.get("redirect_params") else "PASS"), f"{len(data.get('redirect_params',[]))} found" if data.get("redirect_params") else "None detected"))

    return "\n".join(f"<tr><td>{n}</td><td>{s}</td><td>{d}</td></tr>" for n,s,d in checks)

def mk_top_findings(result):
    vulns = result.get("vulnerabilities", []) or []
    if not vulns:
        return "<tr><td colspan='2'>No high-level issues detected.</td></tr>"
    return "\n".join(f"<tr><td>{html.escape(v.get('type',''))}</td><td>{html.escape(v.get('payload',''))}</td></tr>" for v in vulns[:8])

def mk_headers_rows(result):
    headers = result.get("security_headers", {}) or {}
    return "\n".join(f"<tr><td>{html.escape(k)}</td><td>{html.escape(v or 'missing')}</td></tr>" for k,v in headers.items())

def mk_cookies_rows(result):
    cookies = result.get("cookies", []) or []
    if not cookies:
        return "<tr><td>Cookies</td><td>None detected</td></tr>"
    return "\n".join(f"<tr><td>{html.escape(c['name'])}</td><td>{html.escape(str(c['attrs']))}</td></tr>" for c in cookies)

def mk_bf_text(result):
    bf = result.get("bruteforce", []) or []
    if not bf:
        return "No interesting paths discovered."
    lines = [f"{b['url']} -> {b['status']}" for b in bf[:25]]
    return "\n".join(lines)

def get_latest_json():
    reports = sorted(Path("reports").glob("*.json"), key=lambda p: p.stat().st_mtime, reverse=True)
    return reports[0] if reports else None

def main():
    path = Path(sys.argv[1]) if len(sys.argv) > 1 else get_latest_json()
    if not path or not path.exists():
        print("❌ No JSON report found in 'reports/'. Please run a scan first.")
        return
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    score = int(data.get("__score__", 0))
    summary = data.get("__summary__", "Scan summary not available.")
    out_html = TEMPLATE.format(
        target=html.escape(data.get("target","unknown")),
        final_url=html.escape(data.get("final_url","")),
        time=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        score=score,
        summary=html.escape(summary),
        checklist_rows=make_checklist(data),
        top_findings_rows=mk_top_findings(data),
        headers_rows=mk_headers_rows(data),
        cookie_rows=mk_cookies_rows(data),
        bf_text=html.escape(mk_bf_text(data))
    )
    outname=f"onepager_checklist_{path.stem}.html"
    outpath=Path("reports")/outname
    outpath.write_text(out_html,encoding="utf-8")
    print(f"✅ Exportable checklist report saved as: {outpath}")
    webbrowser.open(outpath.resolve().as_uri())

if __name__ == "__main__":
    main()
